cacm-2138.html: prime design goals design ability produce <b>highly</b> highly efficient object <b>code</b> code allow access relevant hardware features host machine provide rational means cope evolutionary nature systems programs
cacm-1988.html: formalism translator interactions formalism presented describing actions <b>processors</b> processors programming languages-compilers interpreters assemblers-and interactions complex systems compiler-compilers extendible <b>languages</b> languages
cacm-3110.html: assembling <b>code</b> code <b>machines</b> machines span-dependent instructions modern computers instructions lengths depend distance instance instruction operand instruction
cacm-1852.html: experience programming <b>languages</b> languages implementation based algorithm language transferred machine man-week machine
cacm-2112.html: cacm february 1970 vere s automata turing <b>machines</b> machines regular expression transduction expression context-free <b>languages</b> languages translation recognizers parsing meta-compilers pushdown transducer syntax directed <b>compilers</b> compilers finite state automata 4.10 4.12 4.20 5.22 ca700203 jb february 14 1978 1049
cacm-1665.html: automatic generation efficient lexical <b>processors</b> processors finite state techniques practical application theory finite-state automata generate lexical <b>processors</b> processors dealt tutorial article aed rword system developed m part aed-1 system
cacm-2175.html: cacm july 1971 ramamoorthy c v gonzalez m j <b>parallel</b> parallel processing cache arithmetic expressions subexpression ordering computational trees <b>compilers</b> compilers 4.12 4.32 ca710707 jb february 2 1978 449 pm
cacm-1811.html: parallel-processor systems multiprocessor systems <b>processors</b> processors simultaneously execute separate tasks single job cooperating decrease solution time computational problem
cacm-2921.html: formally rrp grammars production parts nondeterministic finite state <b>machines</b> machines fsms <b>and</b> and special case regular expressions converted fsms
cacm-1795.html: optimal <b>code</b> code serial <b>parallel</b> parallel computation cacm december 1969 fateman r j <b>code</b> code optimization sequencing operations detection common subexpressions 4.12 ca691217 jb february 15 1978 159 pm
cacm-2495.html: adapting optimal <b>code</b> code generation arithmetic expressions instruction sets present-day computers cacm june 1973 stockhausen p f arithmetic expressions <b>code</b> code generation <b>compilers</b> compilers object-code optimization register assignment trees 4.12 5.24 5.32 ca730605 jb january 23 1978 224 pm
cacm-3075.html: fast <b>parallel</b> parallel sorting algorithms <b>parallel</b> parallel bucket-sort algorithm presented requires time olog n <b>processors</b> processors
cacm-3156.html: computing connected components <b>parallel</b> parallel computers present <b>parallel</b> parallel algorithm n2 <b>processors</b> processors find connected components undirected graph vertices time olog2n
cacm-2714.html: cacm october 1975 gavril f <b>parallel</b> parallel processing <b>parallel</b> parallel merging <b>parallel</b> parallel binary insertion 5.31 ca751005 jb january 6 1978 1050
cacm-2685.html: <b>parallel</b> parallel execution loops methods developed <b>parallel</b> parallel execution iterations loop
cacm-2897.html: case study <b>code</b> code generation technique <b>compilers</b> compilers recent developments optimizing techniques allowed design <b>compilers</b> compilers emerge
cacm-2570.html: comparison list schedules <b>parallel</b> parallel processing systems problem scheduling <b>processors</b> processors minimize execution time program consists set partially ordered tasks studied
cacm-1159.html: machine independence: technology economics survey offered techniques transferring programs, <b>especially</b> especially compilers, computer another.
cacm-1923.html: cacm march 1969 rosin r f operating systems interfaces input-output high level <b>languages</b> languages command language 4.22 4.30 4.31 4.41 ca690304 jb february 20 1978 912
cacm-2929.html: cacm september 1977 scheifler r w inline substitution open coding open compilation program optimization <b>compilers</b> compilers structured programming <b>languages</b> languages run-time statistics 4.12 ca770905 jb december 27 1977 123 pm
cacm-2661.html: ideal teaching machines-a solution pedagogic language problem cacm april 1974 sterling t d pollack s v education programming <b>languages</b> languages simulators 1.52 4.2 ca740409 jb february 1 1978 1038
cacm-2785.html: cacm march 1975 lawrie d h layman t baer d randal j m glypnir illiac iv programming language <b>parallel</b> parallel computation <b>parallel</b> parallel architecture 4.2 4.21 4.22 ca750303jb january 9 1978 457 pm
cacm-2644.html: cacm june 1974 henschen l overbeek r wos l theorem proving resolution factoring paramodulation programming <b>languages</b> languages 3.60 4.22 5.21 ca740602 jb january 17 1978 337 pm
cacm-0637.html: experience shown inherent difficulty building <b>compilers</b> compilers <b>compilers</b> compilers indeed pointed advantages pol constructing programming systems
cacm-2904.html: cacm november 1977 cocke j <b>compilers</b> compilers optimization compiled <b>code</b> code program analysis operator strength reduction test replacement strongly connected region 4.12 5.24 5.32 ca771112 jb december 27 1977 634
cacm-2896.html: exercise proving <b>parallel</b> parallel programs correct <b>parallel</b> parallel program dijkstras on-the-fly garbage collector proved correct proof method developed owicki
cacm-3175.html: <b>code</b> code letter assigned probabilities representing plain text letters
cacm-2497.html: synchronizing <b>processors</b> processors memory-content-generated interrupts implementations lock-unlock method synchronizing <b>processors</b> processors multiprocessor system require uninterruptable memory-pause type instructions
cacm-2298.html: environment research microprogramming emulation development research project microprogramming emulation state university york buffalo consisted phases evaluation <b>machines</b> machines support research decision purchase machine appears superior considered organization definition goals group project
cacm-2886.html: semantic evaluation left paper describes attribute grammars definition programming <b>languages</b> languages <b>compilers</b> compilers formal definition attribute grammars discussion important aspects included
cacm-2289.html: cacm september 1972 levitt k n kautz w h graph theory cellular logic-in-memory arrays <b>parallel</b> parallel processing special purpose computers algorithms distance spanning tree problems 5.32 6.22 6.5 ca720901 jb january 30 1978 916
cacm-1425.html: flow diagrams turing <b>machines</b> machines <b>languages</b> languages formation rules part paper flow diagrams introduced represent inter al
cacm-0303.html: basic terminology connected mechanical <b>languages</b> languages <b>processors</b> processors suggestions paper part terminology work university pennsylvanias office computer research education
cacm-2064.html: <b>code</b> code words describe arrays codewords providing needed descriptive information hyperstructures form
cacm-0670.html: industry <b>highly</b> highly regulated government <b>and</b> and hence subject statutes regulations
cacm-2433.html: cacm october 1973 millstein r e array processing parallelism detection explicit parallelism array allocation <b>parallel</b> parallel control structures illiac iv fortran 4.12 4.21 4.22 ca731007 jb january 20 1978 1130
cacm-1099.html: professional computer work blind developments computer technology opened professional opportunities intelligent blind.
cacm-1409.html: nebula: digital computer 20 mc glass delay line memory oregon state university designed constructed medium-speed serial digital computer glass delay lines circulating 22 mc memory.
cacm-1603.html: multiprogramming monitor small <b>machines</b> machines int combination hardware/software monitor designed control wide variety real-time input/output devices described
cacm-2423.html: parser-generating system constructing compressed <b>compilers</b> compilers paper describes parser-generating system pgs cdc-6500 computer purdue university
cacm-3171.html: cacm october 1979 klint p line number administration diagnostic messages abstract machine <b>code</b> code 4.12 4.13 4.20 4.42 ca791004 db january 17 1980 957
cacm-2411.html: tree-structured programs cacm november 1973 wegner e control structures flowcharts goto statements inductive assertion fix points optimization <b>compilers</b> compilers program documentation program flow graphs programming language design proof programs semantics programming <b>languages</b> languages structured programming
cacm-2706.html: note set basis problem related <b>compaction</b> compaction character sets note discusses reduction set basis problem clique cover problem
cacm-2939.html: cacm august 1977 liskov b snyder a atkinson r schaffert c programming <b>languages</b> languages data types data abstractions control abstractions programming methodology separate compilation 4.0 4.12 4.20 4.22 ca770804 jb december 28 1977 749
cacm-3080.html: cacm july 1978 samet h <b>compilers</b> compilers correctness <b>code</b> code optimization debugging program verification lisp 4.12 4.21 4.22 5.24 ca780708 dh february 7 1979 353 pm
cacm-2514.html: examples involving array <b>languages</b> languages consisting simple geometrical patterns language neuron pictures
cacm-2645.html: <b>languages</b> languages estimating program efficiency <b>languages</b> languages enabling users estimate efficiency computer programs presented
cacm-1747.html: cacm may 1968 van horn e c computer design computer design criteria computer systems computer systems design input equipment input equipment design operating systems operating systems design multiprogramming multiprogrammed systems multiprogrammed system design virtual computers programming <b>languages</b> languages programming language design program semantics programming language semantics determinism reproducibility repeatability deterministic computers protection memory protection information security information privacy computing reliability debugging program debugging program testing <b>parallel</b> parallel processing <b>parallel</b> parallel programming multiprocessing 2.11 4.12 4.13 4.20 4.30 4.42 4.43 5.24 6.20 6.35 ca680509 jb february 23 1978 906
cacm-1591.html: model multifunctional teaching system teaching system model incorporated operating system large computer described.
cacm-1680.html: language <b>processors</b> processors <b>compilers</b> compilers simulation models mathematical solution techniques stored data library user programs incorporated instructional material reprogramming
cacm-1807.html: development fortran <b>compilers</b> compilers proved produce excellent object <b>code</b> code significantly reducing compilation speed
cacm-2253.html: goal generate <b>code</b> code handling tedious address calculations necessitated complicated data structures
cacm-3148.html: high level programming distributed computing programming distributed loosely coupled systems problem growing interest.
cacm-2034.html: cacm july 1970 waite w m bootstrapping macro processing machine independence programming <b>languages</b> languages implementation techniques 4.12 4.22 ca700703 jb february 13 1978 924
cacm-2767.html: comparison simulation event list algorithms algorithms considered schedule events general purpose discrete simulation system.
cacm-2998.html: pointers atoms found obey roughly zipfs law governs word frequencies natural <b>languages</b> languages poin ters lists poin location physically nearby memory
cacm-1947.html: object <b>code</b> code optimization methods analyzing control flow data flow programs compilation applied transforming program improve object time efficiency
cacm-2252.html: method incrementally compiling <b>languages</b> languages nested statement structure method incremental compilation presented applies <b>especially</b> especially programming <b>languages</b> languages statements nested such algol pl/i
cacm-1135.html: philosophy potential overcome well-known deficiencies business-oriented <b>languages</b> languages fully meets requirements set codasyl <b>languages</b> languages including machine-independence
cacm-2692.html: <b>code</b> code capable clipping polygon single boundary reentered clip subsequent boundaries
cacm-3150.html: high level <b>languages</b> languages enabled programmer escape intricacies <b>machines</b> machines order <b>code</b> code higher level programming systems provide means understand manipulate complex systems components
cacm-2579.html: cacm november 1974 freiburghouse r a optimization redundant computations common subexpressions register allocation <b>compilers</b> compilers programming <b>languages</b> languages virtual memory demand paging 4.12 4.2 4.39 ca741105 jb january 16 1978 1024
cacm-1389.html: facilities underlie list <b>processors</b> processors ipl lisp comit ad snobol permits user closer machine <b>code</b> code order write faster-running programs storage efficiently build wider variety linked data structures
cacm-2989.html: cacm march 1977 lunde a computer architecture program behavior instruction sets op <b>code</b> code utilization register structures register utilization simultaneous register lives instruction tracing execution time 6.20 6.21 6.33 ca770303 jb december 30 1977 100
cacm-2723.html: simple case <b>processors</b> processors performing lisp-like list operations performing garbage collection continuously examined
cacm-1463.html: extensible <b>machines</b> machines salient characteristics extensible <b>machines</b> machines em facility providing system control program-to-program program-to-data linkage eg address connection
cacm-2341.html: blocks-a data type snobol4 data type, called block, implemented snobol4.
cacm-1324.html: difficult important research questions advancement general-purpose language <b>processors</b> processors seen concerned measuring dealing ambiguities translating formal <b>languages</b> languages searching large tree structures
cacm-2740.html: cacm july 1975 lauesen s cooperating processes operating system semaphores semaphore applications queue semaphores deadlock deadly embrace hierarchical structuring multiprogramming operating system structure asynchronous structuring buffering <b>parallel</b> parallel processes synchronizing primitives reentrant <b>code</b> code rc 4000 project management time schedule debugging project planning project scheduling reliability program proving coroutines correctness program maintenance software paging 4.30 4.31 4.32 4.42 4.43 5.24 ca750702 jb january 9 1978 1032
cacm-1154.html: multi-tape infinite-state automata survey survey <b>machines</b> machines powerful finite automata powerful general turing <b>machines</b> machines presented
cacm-2684.html: cacm february 1974 ledgard h f syntax translation context-sensitive grammars <b>compilers</b> compilers formal definition pl/i standards 4.2 5.21 5.23 ca740205 jb january 18 1978 107 pm
cacm-3093.html: cacm june 1978 mickunas m modry j programming <b>languages</b> languages error correction automatic correction parsing lr syntax errors <b>compilers</b> compilers 4.12 4.42 5.23 ca780604 dh february 26 1979 1222 pm
cacm-0249.html: specification <b>languages</b> languages mechanical <b>languages</b> languages processors-a bakers dozen cacm december 1961 gorn s ca611201 jb march 15 1978 1032 pm
cacm-2491.html: threaded <b>code</b> code concept threaded <b>code</b> code presented alternative machine language <b>code</b> code
cacm-0048.html: high degree redundancy used permitting single-error correcting <b>code</b> code minimum-distance-three <b>code</b> code 64 10-bit <b>code</b> code words employed station identification <b>code</b> code
cacm-1362.html: <b>code</b> code extension ascii an asa tutorial american standard <b>code</b> code information interchange ascii number control characters principle <b>code</b> code extension is representation information directly represented means characters <b>code</b> code
cacm-1655.html: <b>code</b> code extension procedures information interchange proposed usa standard cacm december 1968 standard <b>code</b> code <b>code</b> code information interchange characters shift out shift in escape data link escape control functions standard procedures <b>code</b> code extension <b>code</b> code table bit pattern 1.0 2.0 2.43 3.20 3.24 3.50 3.51 3.52 3.53 3.54 3.55 3.56 3.57 3.70 3.71 3.72 3.73 3.74 3.75 3.80 3.81 3.82 3.83 5.0 5.1 6.2 6.21 6.22 ca681211 jb february 21 1978 1216 pm
cacm-2748.html: cacm june 1975 dewar r b k threaded <b>code</b> code snobol4 interpretors <b>code</b> code generation 4.12 4.13 ca750605 jb january 9 1978 111 pm
cacm-2534.html: cacm march 1973 conway r w wilcox t r <b>compilers</b> compilers debugging pl/i programming <b>languages</b> languages 1.5 4.12 4.42 ca730305 jb january 24 1978 1045
cacm-0082.html: handling identifiers internal symbols language <b>processors</b> processors substitution computer-oriented symbols programmer-oriented symbols language <b>processors</b> processors examined feasible method presented
cacm-1824.html: <b>code</b> code use normal pl/i strings pieces at levels clean
cacm-2316.html: cacm july 1972 sammet j e programming <b>languages</b> languages higher level <b>languages</b> languages <b>languages</b> languages history future directions language interrelationships programming language tree programming language history programming language future 1.2 4.2 ca720712 jb january 30 1978 138 pm
cacm-3073.html: cacm august 1978 hoare c programming programming <b>languages</b> languages programming primitives program structures <b>parallel</b> parallel programming concurrency input output guarded commands nondeterminacy coroutines procedures multiple entries multiple exits classes data representations recursion conditional critical regions monitors iterative arrays 4.20 4.22 4.32 ca780805 dh february 7 1979 1007
cacm-2633.html: cacm june 1974 adams j gary j contour plotting data transmission remote terminal data <b>compaction</b> compaction 4.41 5.13 ca740613 jb january 17 1978 248 pm
cacm-2681.html: dynamic memory repacking probabilistic model multiprogramming system exercised order determine conditions dynamic repacking main memory beneficial.
cacm-0205.html: macro instruction extensions compiler <b>languages</b> languages macroinstruction <b>compilers</b> compilers constructed small set functions made extremely powerful
cacm-2061.html: cacm may 1970 loeckx j bounded-context parsing bounded-context syntactic analysis parser construction syntactical analyzer construction generators compiler <b>compilers</b> compilers compiler writing systems translator writing systems metacompilers context-free grammars formal <b>languages</b> languages pushdown automata 4.12 5.22 5.23 ca700505 jb february 13 1978 158 pm
cacm-2651.html: cacm may 1974 wegbreit b data types modes mode unions type conversion coercion generic functions extensible <b>languages</b> languages data type definition data description language compilation 4.12 4.13 4.22 ca740502 jb january 17 1978 432 pm
cacm-1262.html: procedure-oriented language statements facilitate <b>parallel</b> parallel processing statements suggested allow programmer writing procedure-oriented language sections program executed <b>parallel</b> parallel
cacm-2700.html: reduction method proving properties <b>parallel</b> parallel programs proving <b>parallel</b> parallel program property convenient assume statement indivisible ie
cacm-2973.html: cacm april 1977 thompson c d kung h t <b>parallel</b> parallel computer <b>parallel</b> parallel sorting <b>parallel</b> parallel merge routing comparison steps perfect shuffle
cacm-1310.html: rapid braille transliteration technique ibm <b>machines</b> machines cacm february 1965 weiler w j klema v c ca650214 jb march 7 1978 1055 pm
cacm-1756.html: hollerith punched card <b>code</b> code proposed usa standard cacm april 1968 usa standard card <b>code</b> code punched card punched card <b>code</b> code hole-patterns hole-patterns assignment punched card systems 1.4 2.0 2.2 2.43 2.9 3.15 3.24 3.50 3.57 3.7 3.80 3.81 3.82 4.11 4.12 ca680414 jb february 23 1978 1014
cacm-3074.html: time space efficient garbage <b>compaction</b> compaction algorithm area storage scattered marked nodes differing sizes wish rearrange compact mass end area revising pointers marked nodes show locations
cacm-1158.html: program structures <b>parallel</b> parallel processing constructs organizing explicating <b>parallel</b> parallel program segments discussed extensions algol 60 constructs serve meta-commands motivated equipment multiprocessing capability
cacm-0799.html: design separable transition-diagram compiler* cobol compiler design presented compact permit rapid, one-pass compilation large subset cobol moderately large computer.
cacm-1652.html: <b>code</b> code called ipc information processing <b>code</b> code 8-bit <b>code</b> code set constructed 7 6 5 4-bit subsets easily derived basic set
cacm-0950.html: <b>parallel</b> parallel methods integrating ordinary differential equations paper dedicated proposition that order take full advantage real-time computations <b>highly</b> highly <b>parallel</b> parallel computers expected future numerical analysis recast <b>parallel</b> parallel form
cacm-2266.html: <b>highly</b> highly <b>parallel</b> parallel algorithm approximating zeros polynomial real zeros algorithm based newtons method simultaneously approximates zeros polynomial real zeros
cacm-1700.html: cacm september,1968 hutton f c peekaboo superimposed coding natural language searching text searching information <b>compaction</b> compaction computer search technique 3.74 ca680901 jb february 22 1978 938
cacm-2138.html: prime design goals design ability produce <b>highly</b> efficient object <b>code</b> allow access relevant hardware features host machine provide rational means cope evolutionary nature systems programs
cacm-1988.html: formalism translator interactions formalism presented describing actions <b>processors</b> programming languages-compilers interpreters assemblers-and interactions complex systems compiler-compilers extendible <b>languages</b>
cacm-3110.html: assembling <b>code</b> <b>machines</b> span-dependent instructions modern computers instructions lengths depend distance instance instruction operand instruction
cacm-1852.html: experience programming <b>languages</b> implementation based algorithm language transferred machine man-week machine
cacm-2112.html: cacm february 1970 vere s automata turing <b>machines</b> regular expression transduction expression context-free <b>languages</b> translation recognizers parsing meta-compilers pushdown transducer syntax directed <b>compilers</b> finite state automata 4.10 4.12 4.20 5.22 ca700203 jb february 14 1978 1049
cacm-1665.html: automatic generation efficient lexical <b>processors</b> finite state techniques practical application theory finite-state automata generate lexical <b>processors</b> dealt tutorial article aed rword system developed m part aed-1 system
cacm-2175.html: cacm july 1971 ramamoorthy c v gonzalez m j <b>parallel</b> processing cache arithmetic expressions subexpression ordering computational trees <b>compilers</b> 4.12 4.32 ca710707 jb february 2 1978 449 pm
cacm-1811.html: parallel-processor systems multiprocessor systems <b>processors</b> simultaneously execute separate tasks single job cooperating decrease solution time computational problem
cacm-2921.html: formally rrp grammars production parts nondeterministic finite state <b>machines</b> fsms <b>and</b> special case regular expressions converted fsms
cacm-1795.html: optimal <b>code</b> serial <b>parallel</b> computation cacm december 1969 fateman r j <b>code</b> optimization sequencing operations detection common subexpressions 4.12 ca691217 jb february 15 1978 159 pm
cacm-2495.html: adapting optimal <b>code</b> generation arithmetic expressions instruction sets present-day computers cacm june 1973 stockhausen p f arithmetic expressions <b>code</b> generation <b>compilers</b> object-code optimization register assignment trees 4.12 5.24 5.32 ca730605 jb january 23 1978 224 pm
cacm-3075.html: fast <b>parallel</b> sorting algorithms <b>parallel</b> bucket-sort algorithm presented requires time olog n <b>processors</b>
cacm-3156.html: computing connected components <b>parallel</b> computers present <b>parallel</b> algorithm n2 <b>processors</b> find connected components undirected graph vertices time olog2n
cacm-2714.html: cacm october 1975 gavril f <b>parallel</b> processing <b>parallel</b> merging <b>parallel</b> binary insertion 5.31 ca751005 jb january 6 1978 1050
cacm-2685.html: <b>parallel</b> execution loops methods developed <b>parallel</b> execution iterations loop
cacm-2897.html: case study <b>code</b> generation technique <b>compilers</b> recent developments optimizing techniques allowed design <b>compilers</b> emerge
cacm-2570.html: comparison list schedules <b>parallel</b> processing systems problem scheduling <b>processors</b> minimize execution time program consists set partially ordered tasks studied
cacm-1159.html: machine independence: technology economics survey offered techniques transferring programs, <b>especially</b> compilers, computer another.
cacm-1923.html: cacm march 1969 rosin r f operating systems interfaces input-output high level <b>languages</b> command language 4.22 4.30 4.31 4.41 ca690304 jb february 20 1978 912
cacm-2929.html: cacm september 1977 scheifler r w inline substitution open coding open compilation program optimization <b>compilers</b> structured programming <b>languages</b> run-time statistics 4.12 ca770905 jb december 27 1977 123 pm
cacm-2661.html: ideal teaching machines-a solution pedagogic language problem cacm april 1974 sterling t d pollack s v education programming <b>languages</b> simulators 1.52 4.2 ca740409 jb february 1 1978 1038
cacm-2785.html: cacm march 1975 lawrie d h layman t baer d randal j m glypnir illiac iv programming language <b>parallel</b> computation <b>parallel</b> architecture 4.2 4.21 4.22 ca750303jb january 9 1978 457 pm
cacm-2644.html: cacm june 1974 henschen l overbeek r wos l theorem proving resolution factoring paramodulation programming <b>languages</b> 3.60 4.22 5.21 ca740602 jb january 17 1978 337 pm
cacm-0637.html: experience shown inherent difficulty building <b>compilers</b> <b>compilers</b> indeed pointed advantages pol constructing programming systems
cacm-2904.html: cacm november 1977 cocke j <b>compilers</b> optimization compiled <b>code</b> program analysis operator strength reduction test replacement strongly connected region 4.12 5.24 5.32 ca771112 jb december 27 1977 634
cacm-2896.html: exercise proving <b>parallel</b> programs correct <b>parallel</b> program dijkstras on-the-fly garbage collector proved correct proof method developed owicki
cacm-3175.html: <b>code</b> letter assigned probabilities representing plain text letters
cacm-2497.html: synchronizing <b>processors</b> memory-content-generated interrupts implementations lock-unlock method synchronizing <b>processors</b> multiprocessor system require uninterruptable memory-pause type instructions
cacm-2298.html: environment research microprogramming emulation development research project microprogramming emulation state university york buffalo consisted phases evaluation <b>machines</b> support research decision purchase machine appears superior considered organization definition goals group project
cacm-2886.html: semantic evaluation left paper describes attribute grammars definition programming <b>languages</b> <b>compilers</b> formal definition attribute grammars discussion important aspects included
cacm-2289.html: cacm september 1972 levitt k n kautz w h graph theory cellular logic-in-memory arrays <b>parallel</b> processing special purpose computers algorithms distance spanning tree problems 5.32 6.22 6.5 ca720901 jb january 30 1978 916
cacm-1425.html: flow diagrams turing <b>machines</b> <b>languages</b> formation rules part paper flow diagrams introduced represent inter al
cacm-0303.html: basic terminology connected mechanical <b>languages</b> <b>processors</b> suggestions paper part terminology work university pennsylvanias office computer research education
cacm-2064.html: <b>code</b> words describe arrays codewords providing needed descriptive information hyperstructures form
cacm-0670.html: industry <b>highly</b> regulated government <b>and</b> hence subject statutes regulations
cacm-2433.html: cacm october 1973 millstein r e array processing parallelism detection explicit parallelism array allocation <b>parallel</b> control structures illiac iv fortran 4.12 4.21 4.22 ca731007 jb january 20 1978 1130
cacm-1099.html: professional computer work blind developments computer technology opened professional opportunities intelligent blind.
cacm-1409.html: nebula: digital computer 20 mc glass delay line memory oregon state university designed constructed medium-speed serial digital computer glass delay lines circulating 22 mc memory.
cacm-1603.html: multiprogramming monitor small <b>machines</b> int combination hardware/software monitor designed control wide variety real-time input/output devices described
cacm-2423.html: parser-generating system constructing compressed <b>compilers</b> paper describes parser-generating system pgs cdc-6500 computer purdue university
cacm-3171.html: cacm october 1979 klint p line number administration diagnostic messages abstract machine <b>code</b> 4.12 4.13 4.20 4.42 ca791004 db january 17 1980 957
cacm-2411.html: tree-structured programs cacm november 1973 wegner e control structures flowcharts goto statements inductive assertion fix points optimization <b>compilers</b> program documentation program flow graphs programming language design proof programs semantics programming <b>languages</b> structured programming
cacm-2706.html: note set basis problem related <b>compaction</b> character sets note discusses reduction set basis problem clique cover problem
cacm-2939.html: cacm august 1977 liskov b snyder a atkinson r schaffert c programming <b>languages</b> data types data abstractions control abstractions programming methodology separate compilation 4.0 4.12 4.20 4.22 ca770804 jb december 28 1977 749
cacm-3080.html: cacm july 1978 samet h <b>compilers</b> correctness <b>code</b> optimization debugging program verification lisp 4.12 4.21 4.22 5.24 ca780708 dh february 7 1979 353 pm
cacm-2514.html: examples involving array <b>languages</b> consisting simple geometrical patterns language neuron pictures
cacm-2645.html: <b>languages</b> estimating program efficiency <b>languages</b> enabling users estimate efficiency computer programs presented
cacm-1747.html: cacm may 1968 van horn e c computer design computer design criteria computer systems computer systems design input equipment input equipment design operating systems operating systems design multiprogramming multiprogrammed systems multiprogrammed system design virtual computers programming <b>languages</b> programming language design program semantics programming language semantics determinism reproducibility repeatability deterministic computers protection memory protection information security information privacy computing reliability debugging program debugging program testing <b>parallel</b> processing <b>parallel</b> programming multiprocessing 2.11 4.12 4.13 4.20 4.30 4.42 4.43 5.24 6.20 6.35 ca680509 jb february 23 1978 906
cacm-1591.html: model multifunctional teaching system teaching system model incorporated operating system large computer described.
cacm-1680.html: language <b>processors</b> <b>compilers</b> simulation models mathematical solution techniques stored data library user programs incorporated instructional material reprogramming
cacm-1807.html: development fortran <b>compilers</b> proved produce excellent object <b>code</b> significantly reducing compilation speed
cacm-2253.html: goal generate <b>code</b> handling tedious address calculations necessitated complicated data structures
cacm-3148.html: high level programming distributed computing programming distributed loosely coupled systems problem growing interest.
cacm-2034.html: cacm july 1970 waite w m bootstrapping macro processing machine independence programming <b>languages</b> implementation techniques 4.12 4.22 ca700703 jb february 13 1978 924
cacm-2767.html: comparison simulation event list algorithms algorithms considered schedule events general purpose discrete simulation system.
cacm-2998.html: pointers atoms found obey roughly zipfs law governs word frequencies natural <b>languages</b> poin ters lists poin location physically nearby memory
cacm-1947.html: object <b>code</b> optimization methods analyzing control flow data flow programs compilation applied transforming program improve object time efficiency
cacm-2252.html: method incrementally compiling <b>languages</b> nested statement structure method incremental compilation presented applies <b>especially</b> programming <b>languages</b> statements nested such algol pl/i
cacm-1135.html: philosophy potential overcome well-known deficiencies business-oriented <b>languages</b> fully meets requirements set codasyl <b>languages</b> including machine-independence
cacm-2692.html: <b>code</b> capable clipping polygon single boundary reentered clip subsequent boundaries
cacm-3150.html: high level <b>languages</b> enabled programmer escape intricacies <b>machines</b> order <b>code</b> higher level programming systems provide means understand manipulate complex systems components
cacm-2579.html: cacm november 1974 freiburghouse r a optimization redundant computations common subexpressions register allocation <b>compilers</b> programming <b>languages</b> virtual memory demand paging 4.12 4.2 4.39 ca741105 jb january 16 1978 1024
cacm-1389.html: facilities underlie list <b>processors</b> ipl lisp comit ad snobol permits user closer machine <b>code</b> order write faster-running programs storage efficiently build wider variety linked data structures
cacm-2989.html: cacm march 1977 lunde a computer architecture program behavior instruction sets op <b>code</b> utilization register structures register utilization simultaneous register lives instruction tracing execution time 6.20 6.21 6.33 ca770303 jb december 30 1977 100
cacm-2723.html: simple case <b>processors</b> performing lisp-like list operations performing garbage collection continuously examined
cacm-1463.html: extensible <b>machines</b> salient characteristics extensible <b>machines</b> em facility providing system control program-to-program program-to-data linkage eg address connection
cacm-2341.html: blocks-a data type snobol4 data type, called block, implemented snobol4.
cacm-1324.html: difficult important research questions advancement general-purpose language <b>processors</b> seen concerned measuring dealing ambiguities translating formal <b>languages</b> searching large tree structures
cacm-2740.html: cacm july 1975 lauesen s cooperating processes operating system semaphores semaphore applications queue semaphores deadlock deadly embrace hierarchical structuring multiprogramming operating system structure asynchronous structuring buffering <b>parallel</b> processes synchronizing primitives reentrant <b>code</b> rc 4000 project management time schedule debugging project planning project scheduling reliability program proving coroutines correctness program maintenance software paging 4.30 4.31 4.32 4.42 4.43 5.24 ca750702 jb january 9 1978 1032
cacm-1154.html: multi-tape infinite-state automata survey survey <b>machines</b> powerful finite automata powerful general turing <b>machines</b> presented
cacm-2684.html: cacm february 1974 ledgard h f syntax translation context-sensitive grammars <b>compilers</b> formal definition pl/i standards 4.2 5.21 5.23 ca740205 jb january 18 1978 107 pm
cacm-3093.html: cacm june 1978 mickunas m modry j programming <b>languages</b> error correction automatic correction parsing lr syntax errors <b>compilers</b> 4.12 4.42 5.23 ca780604 dh february 26 1979 1222 pm
cacm-0249.html: specification <b>languages</b> mechanical <b>languages</b> processors-a bakers dozen cacm december 1961 gorn s ca611201 jb march 15 1978 1032 pm
cacm-2491.html: threaded <b>code</b> concept threaded <b>code</b> presented alternative machine language <b>code</b>
cacm-0048.html: high degree redundancy used permitting single-error correcting <b>code</b> minimum-distance-three <b>code</b> 64 10-bit <b>code</b> words employed station identification <b>code</b>
cacm-1362.html: <b>code</b> extension ascii an asa tutorial american standard <b>code</b> information interchange ascii number control characters principle <b>code</b> extension is representation information directly represented means characters <b>code</b>
cacm-1655.html: <b>code</b> extension procedures information interchange proposed usa standard cacm december 1968 standard <b>code</b> <b>code</b> information interchange characters shift out shift in escape data link escape control functions standard procedures <b>code</b> extension <b>code</b> table bit pattern 1.0 2.0 2.43 3.20 3.24 3.50 3.51 3.52 3.53 3.54 3.55 3.56 3.57 3.70 3.71 3.72 3.73 3.74 3.75 3.80 3.81 3.82 3.83 5.0 5.1 6.2 6.21 6.22 ca681211 jb february 21 1978 1216 pm
cacm-2748.html: cacm june 1975 dewar r b k threaded <b>code</b> snobol4 interpretors <b>code</b> generation 4.12 4.13 ca750605 jb january 9 1978 111 pm
cacm-2534.html: cacm march 1973 conway r w wilcox t r <b>compilers</b> debugging pl/i programming <b>languages</b> 1.5 4.12 4.42 ca730305 jb january 24 1978 1045
cacm-0082.html: handling identifiers internal symbols language <b>processors</b> substitution computer-oriented symbols programmer-oriented symbols language <b>processors</b> examined feasible method presented
cacm-1824.html: <b>code</b> use normal pl/i strings pieces at levels clean
cacm-2316.html: cacm july 1972 sammet j e programming <b>languages</b> higher level <b>languages</b> <b>languages</b> history future directions language interrelationships programming language tree programming language history programming language future 1.2 4.2 ca720712 jb january 30 1978 138 pm
cacm-3073.html: cacm august 1978 hoare c programming programming <b>languages</b> programming primitives program structures <b>parallel</b> programming concurrency input output guarded commands nondeterminacy coroutines procedures multiple entries multiple exits classes data representations recursion conditional critical regions monitors iterative arrays 4.20 4.22 4.32 ca780805 dh february 7 1979 1007
cacm-2633.html: cacm june 1974 adams j gary j contour plotting data transmission remote terminal data <b>compaction</b> 4.41 5.13 ca740613 jb january 17 1978 248 pm
cacm-2681.html: dynamic memory repacking probabilistic model multiprogramming system exercised order determine conditions dynamic repacking main memory beneficial.
cacm-0205.html: macro instruction extensions compiler <b>languages</b> macroinstruction <b>compilers</b> constructed small set functions made extremely powerful
cacm-2061.html: cacm may 1970 loeckx j bounded-context parsing bounded-context syntactic analysis parser construction syntactical analyzer construction generators compiler <b>compilers</b> compiler writing systems translator writing systems metacompilers context-free grammars formal <b>languages</b> pushdown automata 4.12 5.22 5.23 ca700505 jb february 13 1978 158 pm
cacm-2651.html: cacm may 1974 wegbreit b data types modes mode unions type conversion coercion generic functions extensible <b>languages</b> data type definition data description language compilation 4.12 4.13 4.22 ca740502 jb january 17 1978 432 pm
cacm-1262.html: procedure-oriented language statements facilitate <b>parallel</b> processing statements suggested allow programmer writing procedure-oriented language sections program executed <b>parallel</b>
cacm-2700.html: reduction method proving properties <b>parallel</b> programs proving <b>parallel</b> program property convenient assume statement indivisible ie
cacm-2973.html: cacm april 1977 thompson c d kung h t <b>parallel</b> computer <b>parallel</b> sorting <b>parallel</b> merge routing comparison steps perfect shuffle
cacm-1310.html: rapid braille transliteration technique ibm <b>machines</b> cacm february 1965 weiler w j klema v c ca650214 jb march 7 1978 1055 pm
cacm-1756.html: hollerith punched card <b>code</b> proposed usa standard cacm april 1968 usa standard card <b>code</b> punched card punched card <b>code</b> hole-patterns hole-patterns assignment punched card systems 1.4 2.0 2.2 2.43 2.9 3.15 3.24 3.50 3.57 3.7 3.80 3.81 3.82 4.11 4.12 ca680414 jb february 23 1978 1014
cacm-3074.html: time space efficient garbage <b>compaction</b> algorithm area storage scattered marked nodes differing sizes wish rearrange compact mass end area revising pointers marked nodes show locations
cacm-1158.html: program structures <b>parallel</b> processing constructs organizing explicating <b>parallel</b> program segments discussed extensions algol 60 constructs serve meta-commands motivated equipment multiprocessing capability
cacm-0799.html: design separable transition-diagram compiler* cobol compiler design presented compact permit rapid, one-pass compilation large subset cobol moderately large computer.
cacm-1652.html: <b>code</b> called ipc information processing <b>code</b> 8-bit <b>code</b> set constructed 7 6 5 4-bit subsets easily derived basic set
cacm-0950.html: <b>parallel</b> methods integrating ordinary differential equations paper dedicated proposition that order take full advantage real-time computations <b>highly</b> <b>parallel</b> computers expected future numerical analysis recast <b>parallel</b> form
cacm-2266.html: <b>highly</b> <b>parallel</b> algorithm approximating zeros polynomial real zeros algorithm based newtons method simultaneously approximates zeros polynomial real zeros
cacm-1700.html: cacm september,1968 hutton f c peekaboo superimposed coding natural language searching text searching information <b>compaction</b> computer search technique 3.74 ca680901 jb february 22 1978 938
