cacm-1988.html: formalism translator interactions formalism presented describing actions processors programming languages-compilers, interpreters, assemblers-and interactions complex systems compiler-compilers extendible languages.cacm-2112.html: cacm february 1970 vere s automata turing machines regular expression transduction expression context-free <b> languages </b> languages translation recognizers parsing meta-compilers pushdown transducer syntax directed <b> compilers </b> compilers finite state automata 4.10 4.12 4.20 5.22 ca700203 jb february 14 1978 1049cacm-1154.html: <b> intermediate </b> intermediate machines created adjoining infinite-state memory finite-state machine performing following 1 restrict manner unbounded portion memory accessed 2 bound number steps allowed computation increasing recursive function length input 3 restrict total amount memory mannercacm-2061.html: cacm may 1970 loeckx j bounded-context parsing bounded-context syntactic analysis parser <b> construction </b> construction syntactical analyzer <b> construction </b> construction generators compiler <b> compilers </b> compilers compiler writing systems translator writing systems metacompilers context-free grammars formal <b> languages </b> languages pushdown automata 4.12 5.22 5.23 ca700505 jb february 13 1978 158 pmcacm-2921.html: cacm october 1977 lalonde w r finite state machines automata regular expressions syntax diagramslrk grammars parser <b> construction </b> construction parsing programming <b> languages </b> languages language generation formal definition <b> compilers </b> compilers translators scanners 4.2 5.21 5.23 ca771005 jb december 27 1977 1101cacm-2579.html: cacm november 1974 freiburghouse r a optimization redundant computations common subexpressions register allocation <b> compilers </b> compilers programming <b> languages </b> languages virtual memory demand paging 4.12 4.2 4.39 ca741105 jb january 16 1978 1024cacm-2666.html: lions counter gotliebs method <b> construction </b> construction school timetables timetable problem essentially discrete problemcacm-0252.html: programming duplex computer system paper describes method duplex-computer programming computers military defense system.cacm-0265.html: low level language subroutines fortran paper describes subroutines coded symbolic <b> languages </b> languages fortran coded programs deal special arithmetic egcacm-2886.html: semantic evaluation left paper describes attribute grammars definition programming <b> languages </b> languages <b> compilers </b> compilers formal definition attribute grammars discussion important aspects includedcacm-3102.html: incorporation units programming <b> languages </b> languages issues programming language aid keeping track physical units feet sec etccacm-1723.html: computer <b> construction </b> construction project networks project networks pert cpmcacm-3115.html: orderly enumeration nonsingular binary matrices applied text encryption nonsingular binary matrices order n, i.e., nonsingular field {0, 1}, initial segment natural numbers one-to-one correspondence.cacm-0637.html: experience shown inherent difficulty building <b> compilers </b> compilers <b> compilers </b> compilers indeed pointed advantages pol constructing programming systemscacm-2411.html: tree-structured programs cacm november 1973 wegner e control structures flowcharts goto statements inductive assertion fix points optimization <b> compilers </b> compilers program documentation program flow graphs programming language design proof programs semantics programming <b> languages </b> languages structured programmingcacm-1350.html: augmented predictive analyzer context-free languages-its relative efficiency proven greibach context-free grammar g standard-form grammar gs constructed generates <b> languages </b> languages generated rules form cy1 ym m o yi <b> intermediate </b> intermediate symbols terminal symbolcacm-3099.html: sufficient conditions <b> construction </b> construction difficult integer programming problems known optimal solutionscacm-2939.html: means programming examples utility kinds abstractions program <b> construction </b> construction illustrated shown clu programs written implement abstractionscacm-1533.html: marovian model university michigan executive system mathematical model computer's executive system postulated parameters estimated aid extensive data system's operation.cacm-1135.html: philosophy potential overcome well-known deficiencies business-oriented <b> languages </b> languages fully meets requirements set codasyl <b> languages </b> languages including machine-independencecacm-1976.html: multi-attribute retrieval combined indexes paper organization scheme designed replace popular secondary index filing scheme (or inverted secondary key fields) described.cacm-1029.html: simple automatic derivative evaluation program procedure automatic evaluation total/partial derivatives arbitrary algebraic functions presented.cacm-1387.html: solution systems polynomial equations elimination elimination procedure williams coded lisp formac solving systems polynomial equations.cacm-3130.html: curriculum '78 - recommendations undergraduate program computer science contained report recommendations undergraduate degree program computer science curriculum committee computer science (c3s) association computing machinery (acm).cacm-2542.html: cacm february 1973 graham r m clancy g j jr devaney d b operating system development language processing software evaluation <b> compilers </b> compilers system programming supervisory systems debugging program maintenance modeling system integration simulation 4.0 4.12 4.22 4.30 4.42 4.43 8.1 ca730206 jb january 24 1978 207 pmcacm-1386.html: symbolic factoring polynomials variables algorithm finding symbolic factors multi-variate polynomial integer coefficients presented.cacm-1457.html: advantages programming <b> languages </b> languages retrieval application examined suggestions made design programming facilities aid information retrievalcacm-1835.html: cacm october 1969 dewar r b k hochsprung r r <b> languages </b> languages programming <b> languages </b> languages student programming systems language design high school programs college courses 1.51 1.52 4.12 4.22 ca691011 jb february 15 1978 154 pmcacm-2873.html: cacm april 1976 raymond j interactive programming problem oriented <b> languages </b> languages computer graphics interpreters analytic geometry 3.20 4.13 4.22 4.9 ca760403 jb january 4 1978 426 pmcacm-1304.html: rapid turnaround multi-programming system paper, basic features, system characteristics control algorithm multi-programming system rapid turnaround time described.cacm-1852.html: experience programming <b> languages </b> languages implementation based algorithm language transferred machine man-week machinecacm-2254.html: dynamic partitioning array <b> languages </b> languages classical process partitioning array subarrays extended array language operationcacm-1807.html: development fortran <b> compilers </b> compilers proved produce excellent object code significantly reducing compilation speedcacm-3171.html: line numbers made cheap technique run-time line number administration implementations high level languages.cacm-1671.html: phonological rule tester design implementation system alleviate problem rule evaluation linguist area phonology presented.cacm-2990.html: effective information retrieval term accuracy performance information retrieval systems evaluated number ways.cacm-3124.html: recursive data structures apl mathematical study approaches defining nested arrays apl presented.cacm-0062.html: multi-dimensional least-squares polynomial curve fitting cacm september, 1959 lesh, f. h. ca590907 jb march 22, 1978 4:44 pmcacm-2684.html: cacm february 1974 ledgard h f syntax translation context-sensitive grammars <b> compilers </b> compilers formal definition pl/i standards 4.2 5.21 5.23 ca740205 jb january 18 1978 107 pmcacm-2138.html: cacm december 1971 wulf w a russell d b programming <b> languages </b> languages implementation language systems programming data structures 4.12 4.21 4.22 ca711205 jb february 2 1978 1009cacm-2929.html: cacm september 1977 scheifler r w inline substitution open coding open compilation program optimization <b> compilers </b> compilers structured programming <b> languages </b> languages run-time statistics 4.12 ca770905 jb december 27 1977 123 pmcacm-3030.html: hierarchical design proof hierarchical programming increasingly recognized helpful <b> construction </b> construction large programs.cacm-3093.html: cacm june 1978 mickunas m modry j programming <b> languages </b> languages error correction automatic correction parsing lr syntax errors <b> compilers </b> compilers 4.12 4.42 5.23 ca780604 dh february 26 1979 1222 pmcacm-1003.html: <b> construction </b> construction computer programs based direct statement physical laws principle general applicability applied physical phenomenacacm-1572.html: simulation time sharing systems development large scale time-sharing systems raised number problems computation center management.cacm-2424.html: technique dynamic verification <b> construction </b> construction operating system make decisions improperly presence single hardware software faultcacm-1402.html: method obtaining functional values points <b> intermediate </b> intermediate integration points yields accuracy comparable integration require storing additional information interpolation methodscacm-0303.html: basic terminology connected mechanical <b> languages </b> languages processors suggestions paper part terminology work university pennsylvanias office computer research educationcacm-1162.html: assembly <b> languages </b> languages generally provide one-for-one translation symbolic numeric version program is assembly language machine languagecacm-1456.html: important conclusion that lisp list processing <b> languages </b> languages ideally suited producing complex associative structures inadequate vehicles language processing large scale-at east auxiliary memory continuous extension core memorycacm-2372.html: implementation security measures information systems security information system represented model matrix elements decision rules row column indices users data items respectively.cacm-1788.html: general processor programming <b> languages </b> languages efforts made develop implementing higher level programming language <b> construction </b> construction compiler proved generally satisfactorycacm-2534.html: cacm march 1973 conway r w wilcox t r <b> compilers </b> compilers debugging pl/i programming <b> languages </b> languages 1.5 4.12 4.42 ca730305 jb january 24 1978 1045cacm-3105.html: programming <b> languages </b> languages access control data types abstract data types type checking capabilities 4.20 4.35 ca780502 dh february 26 1979 319 pmcacm-2470.html: cacm august 1973 maclennan b j semantics formal systems lambda-calculus extensible <b> languages </b> languages data types modes axioms correctness formal language definition formal description data structures description <b> languages </b> languages models computation 4.22 5.21 5.24 5.26 ca730804 jb january 23 1978 1101cacm-2316.html: cacm july 1972 sammet j e programming <b> languages </b> languages higher level <b> languages </b> languages <b> languages </b> languages history future directions language interrelationships programming language tree programming language history programming language future 1.2 4.2 ca720712 jb january 30 1978 138 pmcacm-1194.html: establishment acm repository principles ir system applied operation history establishment acm repository moore school, university pennsylvania, reviewed briefly.cacm-1947.html: cacm january 1969 lowry e s medlock c w <b> compilers </b> compilers data flow analysis dominance efficiency fortran graph theory loop structure machine instructions object code optimization redundancy elimination register assignment system/360 4.12 5.24 5.32 ca690102 jb february 20 1978 1215 pmcacm-2210.html: method illustrated automatic <b> construction </b> construction recursive iterative programs operating natural numberslists trees order construct program satisfying specifications theorem induced specifications proved desired program extracted proofcacm-2746.html: <b> construction </b> construction pattern matching machine takes time proportional sum lengths keywordscacm-2820.html: cacm november 1976 wilcox t r davis a m tindall m h interactive programming table driven <b> compilers </b> compilers error correction interpreters debugging computer assisted instruction computer science education 1.5 4.12 4.13 4.42 8.2 ca761103 jb january 3 1978 337 pmcacm-2867.html: modularization hierarchy family operating systems paper describes design philosophy <b> construction </b> construction family operating systems.cacm-0205.html: macro instruction extensions compiler <b> languages </b> languages macroinstruction <b> compilers </b> compilers constructed small set functions made extremely powerfulcacm-2732.html: cacm august 1975 dijkstra e w programming <b> languages </b> languages sequencing primitives program semantics programming language semantics nondeterminacy case-construction repetition termination correctness proof derivation programs programming methodology 4.20 4.22 ca750803 jb january 6 1978 446 pmcacm-1223.html: high speed compilation efficient object code three-pass compiler properties briefly described passes scan <b> intermediate </b> intermediate language produced preceding pass essentially reverse order generated pass hasto read bulky problem-oriented inputcacm-0661.html: indexing lambda-notation methods indexing sequentially stored elements sparse multi-dimensional arrays scheme notation.cacm-2136.html: note "a modification nordsieck's method 'off-step' point" cacm december, 1971 blumberg, j. w. foulk, c. r. ordinary differential equations, multi-step methods, predictor, corrector, round-off error, nordsieck's method, gragg-stetter modification 5.11 5.16 5.17 ca711207 jb february 2, 1978 9:52cacm-3077.html: cacm august 1978 backus j functional programming algebra programs combining forms functional forms programming <b> languages </b> languages von neumann computers von neumann <b> languages </b> languages models computing systems applicative computing systems applicative state transition systems program transformation program correctness program termination metacomposition 4.20 4.29 5.20 5.24 5.26 ca780801 dh february 7 1979 313 pmcacm-1309.html: special <b> languages </b> languages extract matran permits selective extraction data subset efficient processing computational sequence flexible presentation results tabular graphical formcacm-1348.html: flowtrace, computer program flowcharting programs flowtrace system produces flowcharts programs written "almost any" programming language.cacm-2739.html: cacm july 1975 sager n grishman r natural language parsing grammar programming <b> languages </b> languages 3.42 3.79 4.22 ca750703 jb january 9 1978 1017cacm-2652.html: reduction compilation costs language contraction programming <b> languages </b> languages tailored groups users constructed removing unwanted features general purpose languagecacm-2233.html: signature simulation cryptographic codes cyphers allegedly authored thomas jefferson beale 1822 subject intensive study 100 years.cacm-0799.html: design separable transition-diagram compiler* cobol compiler design presented compact permit rapid, one-pass compilation large subset cobol moderately large computer.cacm-1484.html: inadequacies standard programming <b> languages </b> languages description systems discussed dialect algol suitable describing synchronous systems introducedcacm-2718.html: cacm october 1975 gerritsen r network model databases data base task group database design data structure automatic programming translation nonprocedural <b> languages </b> languages 3.5 3.64 3.7 4.2 5.23 ca751001 jb january 6 1978 202 pmcacm-1565.html: language-independent macro processor macro processor source language.cacm-1521.html: multi-dimensional partition generator (algorithm 313 [a1]) cacm october, 1967 bratley, p. mckay, j. k. s. ca671012b jb march 23, 1978 2:26 pmcacm-1611.html: scheduling project networks basic concepts terminology project networking developed.cacm-3189.html: algebraic compiler fortran assembly program algebraic compiler written added fortran assembly program.cacm-1658.html: analysis algorithms zero-one programming problem paper concerned review examination existing algorithms zero-one programming problem.cacm-1783.html: combinations rounding truncation conversions question considered significant digits needed <b> intermediate </b> intermediate base allow in-and-out conversions original number when possible significant digitcacm-1496.html: formal semantics computer <b> languages </b> languages application compiler-compiler semantic meta-language developed representing meanings statements large class computer <b> languages </b> languagescacm-1134.html: effects 6600 computer language structures problem compiling efficient 6600 codes prompted development <b> intermediate </b> intermediate language reflecting structure machine easily manipulated improving object program efficiencycacm-2341.html: blocks-a data type snobol4 data type, called block, implemented snobol4.cacm-1869.html: block structures indirect addressing garbage collection programming <b> languages </b> languages included explicit implicit block structures provide naming convenience programmercacm-2320.html: cacm july 1972 hansen p b structured multiprogramming programming <b> languages </b> languages operating systems concurrent processes shared data mutual exclusion critical regions process communication synchronizing eventscacm-2558.html: protection programming <b> languages </b> languages linguistic mechanisms protect subprogram anothers malfunctioning describedcacm-2767.html: comparison simulation event list algorithms algorithms considered schedule events general purpose discrete simulation system.cacm-3101.html: cacm may 1978 hanson d griswold r procedures coroutines programming <b> languages </b> languages interpreters snobol 4 backtracking 4.2 4.20 4.22 4.13 ca780506 dh february 26 1979 136 pmcacm-1238.html: technique integrated reports multi-run system requirements requisition accounting system san francisco overseas supply agency (osa) included exception reporting osa itself.cacm-2062.html: application sequential sampling simulation: inventory model sequential sampling procedures applied analysis data generated computer simulation experiment multi-item inventory model.cacm-2609.html: interpolation rounded ramp functions interpolation function introduced.cacm-0051.html: <b> construction </b> construction micro-flowcharts cacm october 1959 gorn s ingerman p z crozier j b ca591008 jb march 22 1978 410 pmcacm-0070.html: <b> construction </b> construction set test matrices paper develops equations properties set test matrices determination accuracy routines finding inverse determinant and/or eigenvalues matrixcacm-0929.html: glossary <b> construction </b> construction cacm february 1963 grems m ca630204 jb march 14 1978 221 pmcacm-1313.html: <b> construction </b> construction nonlinear programming test problems cacm february 1965 rosen j b suzuki s ca650211 jb march 7 1978 1058 pmcacm-2066.html: algol <b> construction </b> construction procedures parameters procedures cacm april 1970 knight k r algol procedures parameters side effects 4.22 ca700418 jb february 13 1978 230 pmcacm-2495.html: adapting optimal code generation arithmetic expressions instruction sets present-day computers cacm june 1973 stockhausen p f arithmetic expressions code generation <b> compilers </b> compilers object-code optimization register assignment trees 4.12 5.24 5.32 ca730605 jb january 23 1978 224 pmcacm-2551.html: mutual recursion algol 60 restricted <b> compilers </b> compilers cacm january, 1973 atkins,m.cacm-1988.html: formalism translator interactions formalism presented describing actions processors programming languages-compilers, interpreters, assemblers-and interactions complex systems compiler-compilers extendible languages.
cacm-2112.html: cacm february 1970 vere s automata turing machines regular expression transduction expression context-free <b>languages</b> languages translation recognizers parsing meta-compilers pushdown transducer syntax directed <b>compilers</b> compilers finite state automata 4.10 4.12 4.20 5.22 ca700203 jb february 14 1978 1049
cacm-1154.html: <b>intermediate</b> intermediate machines created adjoining infinite-state memory finite-state machine performing following 1 restrict manner unbounded portion memory accessed 2 bound number steps allowed computation increasing recursive function length input 3 restrict total amount memory manner
cacm-2061.html: cacm may 1970 loeckx j bounded-context parsing bounded-context syntactic analysis parser <b>construction</b> construction syntactical analyzer <b>construction</b> construction generators compiler <b>compilers</b> compilers compiler writing systems translator writing systems metacompilers context-free grammars formal <b>languages</b> languages pushdown automata 4.12 5.22 5.23 ca700505 jb february 13 1978 158 pm
cacm-2921.html: cacm october 1977 lalonde w r finite state machines automata regular expressions syntax diagramslrk grammars parser <b>construction</b> construction parsing programming <b>languages</b> languages language generation formal definition <b>compilers</b> compilers translators scanners 4.2 5.21 5.23 ca771005 jb december 27 1977 1101
cacm-2579.html: cacm november 1974 freiburghouse r a optimization redundant computations common subexpressions register allocation <b>compilers</b> compilers programming <b>languages</b> languages virtual memory demand paging 4.12 4.2 4.39 ca741105 jb january 16 1978 1024
cacm-2666.html: lions counter gotliebs method <b>construction</b> construction school timetables timetable problem essentially discrete problem
cacm-0252.html: programming duplex computer system paper describes method duplex-computer programming computers military defense system.
cacm-0265.html: low level language subroutines fortran paper describes subroutines coded symbolic <b>languages</b> languages fortran coded programs deal special arithmetic eg
cacm-2886.html: semantic evaluation left paper describes attribute grammars definition programming <b>languages</b> languages <b>compilers</b> compilers formal definition attribute grammars discussion important aspects included
cacm-3102.html: incorporation units programming <b>languages</b> languages issues programming language aid keeping track physical units feet sec etc
cacm-1723.html: computer <b>construction</b> construction project networks project networks pert cpm
cacm-3115.html: orderly enumeration nonsingular binary matrices applied text encryption nonsingular binary matrices order n, i.e., nonsingular field {0, 1}, initial segment natural numbers one-to-one correspondence.
cacm-0637.html: experience shown inherent difficulty building <b>compilers</b> compilers <b>compilers</b> compilers indeed pointed advantages pol constructing programming systems
cacm-2411.html: tree-structured programs cacm november 1973 wegner e control structures flowcharts goto statements inductive assertion fix points optimization <b>compilers</b> compilers program documentation program flow graphs programming language design proof programs semantics programming <b>languages</b> languages structured programming
cacm-1350.html: augmented predictive analyzer context-free languages-its relative efficiency proven greibach context-free grammar g standard-form grammar gs constructed generates <b>languages</b> languages generated rules form cy1 ym m o yi <b>intermediate</b> intermediate symbols terminal symbol
cacm-3099.html: sufficient conditions <b>construction</b> construction difficult integer programming problems known optimal solutions
cacm-2939.html: means programming examples utility kinds abstractions program <b>construction</b> construction illustrated shown clu programs written implement abstractions
cacm-1533.html: marovian model university michigan executive system mathematical model computer's executive system postulated parameters estimated aid extensive data system's operation.
cacm-1135.html: philosophy potential overcome well-known deficiencies business-oriented <b>languages</b> languages fully meets requirements set codasyl <b>languages</b> languages including machine-independence
cacm-1976.html: multi-attribute retrieval combined indexes paper organization scheme designed replace popular secondary index filing scheme (or inverted secondary key fields) described.
cacm-1029.html: simple automatic derivative evaluation program procedure automatic evaluation total/partial derivatives arbitrary algebraic functions presented.
cacm-1387.html: solution systems polynomial equations elimination elimination procedure williams coded lisp formac solving systems polynomial equations.
cacm-3130.html: curriculum '78 - recommendations undergraduate program computer science contained report recommendations undergraduate degree program computer science curriculum committee computer science (c3s) association computing machinery (acm).
cacm-2542.html: cacm february 1973 graham r m clancy g j jr devaney d b operating system development language processing software evaluation <b>compilers</b> compilers system programming supervisory systems debugging program maintenance modeling system integration simulation 4.0 4.12 4.22 4.30 4.42 4.43 8.1 ca730206 jb january 24 1978 207 pm
cacm-1386.html: symbolic factoring polynomials variables algorithm finding symbolic factors multi-variate polynomial integer coefficients presented.
cacm-1457.html: advantages programming <b>languages</b> languages retrieval application examined suggestions made design programming facilities aid information retrieval
cacm-1835.html: cacm october 1969 dewar r b k hochsprung r r <b>languages</b> languages programming <b>languages</b> languages student programming systems language design high school programs college courses 1.51 1.52 4.12 4.22 ca691011 jb february 15 1978 154 pm
cacm-2873.html: cacm april 1976 raymond j interactive programming problem oriented <b>languages</b> languages computer graphics interpreters analytic geometry 3.20 4.13 4.22 4.9 ca760403 jb january 4 1978 426 pm
cacm-1304.html: rapid turnaround multi-programming system paper, basic features, system characteristics control algorithm multi-programming system rapid turnaround time described.
cacm-1852.html: experience programming <b>languages</b> languages implementation based algorithm language transferred machine man-week machine
cacm-2254.html: dynamic partitioning array <b>languages</b> languages classical process partitioning array subarrays extended array language operation
cacm-1807.html: development fortran <b>compilers</b> compilers proved produce excellent object code significantly reducing compilation speed
cacm-3171.html: line numbers made cheap technique run-time line number administration implementations high level languages.
cacm-1671.html: phonological rule tester design implementation system alleviate problem rule evaluation linguist area phonology presented.
cacm-2990.html: effective information retrieval term accuracy performance information retrieval systems evaluated number ways.
cacm-3124.html: recursive data structures apl mathematical study approaches defining nested arrays apl presented.
cacm-0062.html: multi-dimensional least-squares polynomial curve fitting cacm september, 1959 lesh, f. h. ca590907 jb march 22, 1978 4:44 pm
cacm-2684.html: cacm february 1974 ledgard h f syntax translation context-sensitive grammars <b>compilers</b> compilers formal definition pl/i standards 4.2 5.21 5.23 ca740205 jb january 18 1978 107 pm
cacm-2138.html: cacm december 1971 wulf w a russell d b programming <b>languages</b> languages implementation language systems programming data structures 4.12 4.21 4.22 ca711205 jb february 2 1978 1009
cacm-2929.html: cacm september 1977 scheifler r w inline substitution open coding open compilation program optimization <b>compilers</b> compilers structured programming <b>languages</b> languages run-time statistics 4.12 ca770905 jb december 27 1977 123 pm
cacm-3030.html: hierarchical design proof hierarchical programming increasingly recognized helpful <b>construction</b> construction large programs.
cacm-3093.html: cacm june 1978 mickunas m modry j programming <b>languages</b> languages error correction automatic correction parsing lr syntax errors <b>compilers</b> compilers 4.12 4.42 5.23 ca780604 dh february 26 1979 1222 pm
cacm-1003.html: <b>construction</b> construction computer programs based direct statement physical laws principle general applicability applied physical phenomena
cacm-1572.html: simulation time sharing systems development large scale time-sharing systems raised number problems computation center management.
cacm-2424.html: technique dynamic verification <b>construction</b> construction operating system make decisions improperly presence single hardware software fault
cacm-1402.html: method obtaining functional values points <b>intermediate</b> intermediate integration points yields accuracy comparable integration require storing additional information interpolation methods
cacm-0303.html: basic terminology connected mechanical <b>languages</b> languages processors suggestions paper part terminology work university pennsylvanias office computer research education
cacm-1162.html: assembly <b>languages</b> languages generally provide one-for-one translation symbolic numeric version program is assembly language machine language
cacm-1456.html: important conclusion that lisp list processing <b>languages</b> languages ideally suited producing complex associative structures inadequate vehicles language processing large scale-at east auxiliary memory continuous extension core memory
cacm-2372.html: implementation security measures information systems security information system represented model matrix elements decision rules row column indices users data items respectively.
cacm-1788.html: general processor programming <b>languages</b> languages efforts made develop implementing higher level programming language <b>construction</b> construction compiler proved generally satisfactory
cacm-2534.html: cacm march 1973 conway r w wilcox t r <b>compilers</b> compilers debugging pl/i programming <b>languages</b> languages 1.5 4.12 4.42 ca730305 jb january 24 1978 1045
cacm-3105.html: programming <b>languages</b> languages access control data types abstract data types type checking capabilities 4.20 4.35 ca780502 dh february 26 1979 319 pm
cacm-2470.html: cacm august 1973 maclennan b j semantics formal systems lambda-calculus extensible <b>languages</b> languages data types modes axioms correctness formal language definition formal description data structures description <b>languages</b> languages models computation 4.22 5.21 5.24 5.26 ca730804 jb january 23 1978 1101
cacm-2316.html: cacm july 1972 sammet j e programming <b>languages</b> languages higher level <b>languages</b> languages <b>languages</b> languages history future directions language interrelationships programming language tree programming language history programming language future 1.2 4.2 ca720712 jb january 30 1978 138 pm
cacm-1194.html: establishment acm repository principles ir system applied operation history establishment acm repository moore school, university pennsylvania, reviewed briefly.
cacm-1947.html: cacm january 1969 lowry e s medlock c w <b>compilers</b> compilers data flow analysis dominance efficiency fortran graph theory loop structure machine instructions object code optimization redundancy elimination register assignment system/360 4.12 5.24 5.32 ca690102 jb february 20 1978 1215 pm
cacm-2210.html: method illustrated automatic <b>construction</b> construction recursive iterative programs operating natural numberslists trees order construct program satisfying specifications theorem induced specifications proved desired program extracted proof
cacm-2746.html: <b>construction</b> construction pattern matching machine takes time proportional sum lengths keywords
cacm-2820.html: cacm november 1976 wilcox t r davis a m tindall m h interactive programming table driven <b>compilers</b> compilers error correction interpreters debugging computer assisted instruction computer science education 1.5 4.12 4.13 4.42 8.2 ca761103 jb january 3 1978 337 pm
cacm-2867.html: modularization hierarchy family operating systems paper describes design philosophy <b>construction</b> construction family operating systems.
cacm-0205.html: macro instruction extensions compiler <b>languages</b> languages macroinstruction <b>compilers</b> compilers constructed small set functions made extremely powerful
cacm-2732.html: cacm august 1975 dijkstra e w programming <b>languages</b> languages sequencing primitives program semantics programming language semantics nondeterminacy case-construction repetition termination correctness proof derivation programs programming methodology 4.20 4.22 ca750803 jb january 6 1978 446 pm
cacm-1223.html: high speed compilation efficient object code three-pass compiler properties briefly described passes scan <b>intermediate</b> intermediate language produced preceding pass essentially reverse order generated pass hasto read bulky problem-oriented input
cacm-0661.html: indexing lambda-notation methods indexing sequentially stored elements sparse multi-dimensional arrays scheme notation.
cacm-2136.html: note "a modification nordsieck's method 'off-step' point" cacm december, 1971 blumberg, j. w. foulk, c. r. ordinary differential equations, multi-step methods, predictor, corrector, round-off error, nordsieck's method, gragg-stetter modification 5.11 5.16 5.17 ca711207 jb february 2, 1978 9:52
cacm-3077.html: cacm august 1978 backus j functional programming algebra programs combining forms functional forms programming <b>languages</b> languages von neumann computers von neumann <b>languages</b> languages models computing systems applicative computing systems applicative state transition systems program transformation program correctness program termination metacomposition 4.20 4.29 5.20 5.24 5.26 ca780801 dh february 7 1979 313 pm
cacm-1309.html: special <b>languages</b> languages extract matran permits selective extraction data subset efficient processing computational sequence flexible presentation results tabular graphical form
cacm-1348.html: flowtrace, computer program flowcharting programs flowtrace system produces flowcharts programs written "almost any" programming language.
cacm-2739.html: cacm july 1975 sager n grishman r natural language parsing grammar programming <b>languages</b> languages 3.42 3.79 4.22 ca750703 jb january 9 1978 1017
cacm-2652.html: reduction compilation costs language contraction programming <b>languages</b> languages tailored groups users constructed removing unwanted features general purpose language
cacm-2233.html: signature simulation cryptographic codes cyphers allegedly authored thomas jefferson beale 1822 subject intensive study 100 years.
cacm-0799.html: design separable transition-diagram compiler* cobol compiler design presented compact permit rapid, one-pass compilation large subset cobol moderately large computer.
cacm-1484.html: inadequacies standard programming <b>languages</b> languages description systems discussed dialect algol suitable describing synchronous systems introduced
cacm-2718.html: cacm october 1975 gerritsen r network model databases data base task group database design data structure automatic programming translation nonprocedural <b>languages</b> languages 3.5 3.64 3.7 4.2 5.23 ca751001 jb january 6 1978 202 pm
cacm-1565.html: language-independent macro processor macro processor source language.
cacm-1521.html: multi-dimensional partition generator (algorithm 313 [a1]) cacm october, 1967 bratley, p. mckay, j. k. s. ca671012b jb march 23, 1978 2:26 pm
cacm-1611.html: scheduling project networks basic concepts terminology project networking developed.
cacm-3189.html: algebraic compiler fortran assembly program algebraic compiler written added fortran assembly program.
cacm-1658.html: analysis algorithms zero-one programming problem paper concerned review examination existing algorithms zero-one programming problem.
cacm-1783.html: combinations rounding truncation conversions question considered significant digits needed <b>intermediate</b> intermediate base allow in-and-out conversions original number when possible significant digit
cacm-1496.html: formal semantics computer <b>languages</b> languages application compiler-compiler semantic meta-language developed representing meanings statements large class computer <b>languages</b> languages
cacm-1134.html: effects 6600 computer language structures problem compiling efficient 6600 codes prompted development <b>intermediate</b> intermediate language reflecting structure machine easily manipulated improving object program efficiency
cacm-2341.html: blocks-a data type snobol4 data type, called block, implemented snobol4.
cacm-1869.html: block structures indirect addressing garbage collection programming <b>languages</b> languages included explicit implicit block structures provide naming convenience programmer
cacm-2320.html: cacm july 1972 hansen p b structured multiprogramming programming <b>languages</b> languages operating systems concurrent processes shared data mutual exclusion critical regions process communication synchronizing events
cacm-2558.html: protection programming <b>languages</b> languages linguistic mechanisms protect subprogram anothers malfunctioning described
cacm-2767.html: comparison simulation event list algorithms algorithms considered schedule events general purpose discrete simulation system.
cacm-3101.html: cacm may 1978 hanson d griswold r procedures coroutines programming <b>languages</b> languages interpreters snobol 4 backtracking 4.2 4.20 4.22 4.13 ca780506 dh february 26 1979 136 pm
cacm-1238.html: technique integrated reports multi-run system requirements requisition accounting system san francisco overseas supply agency (osa) included exception reporting osa itself.
cacm-2062.html: application sequential sampling simulation: inventory model sequential sampling procedures applied analysis data generated computer simulation experiment multi-item inventory model.
cacm-2609.html: interpolation rounded ramp functions interpolation function introduced.
cacm-0051.html: <b>construction</b> construction micro-flowcharts cacm october 1959 gorn s ingerman p z crozier j b ca591008 jb march 22 1978 410 pm
cacm-0070.html: <b>construction</b> construction set test matrices paper develops equations properties set test matrices determination accuracy routines finding inverse determinant and/or eigenvalues matrix
cacm-0929.html: glossary <b>construction</b> construction cacm february 1963 grems m ca630204 jb march 14 1978 221 pm
cacm-1313.html: <b>construction</b> construction nonlinear programming test problems cacm february 1965 rosen j b suzuki s ca650211 jb march 7 1978 1058 pm
cacm-2066.html: algol <b>construction</b> construction procedures parameters procedures cacm april 1970 knight k r algol procedures parameters side effects 4.22 ca700418 jb february 13 1978 230 pm
cacm-2495.html: adapting optimal code generation arithmetic expressions instruction sets present-day computers cacm june 1973 stockhausen p f arithmetic expressions code generation <b>compilers</b> compilers object-code optimization register assignment trees 4.12 5.24 5.32 ca730605 jb january 23 1978 224 pm
cacm-2551.html: mutual recursion algol 60 restricted <b>compilers</b> compilers cacm january, 1973 atkins,m.
cacm-1988.html: formalism translator interactions formalism presented describing actions processors programming languages-compilers, interpreters, assemblers-and interactions complex systems compiler-compilers extendible languages.
cacm-2112.html: cacm february 1970 vere s automata turing machines regular expression transduction expression context-free <b>languages</b> translation recognizers parsing meta-compilers pushdown transducer syntax directed <b>compilers</b> finite state automata 4.10 4.12 4.20 5.22 ca700203 jb february 14 1978 1049
cacm-1154.html: <b>intermediate</b> machines created adjoining infinite-state memory finite-state machine performing following 1 restrict manner unbounded portion memory accessed 2 bound number steps allowed computation increasing recursive function length input 3 restrict total amount memory manner
cacm-2061.html: cacm may 1970 loeckx j bounded-context parsing bounded-context syntactic analysis parser <b>construction</b> syntactical analyzer <b>construction</b> generators compiler <b>compilers</b> compiler writing systems translator writing systems metacompilers context-free grammars formal <b>languages</b> pushdown automata 4.12 5.22 5.23 ca700505 jb february 13 1978 158 pm
cacm-2921.html: cacm october 1977 lalonde w r finite state machines automata regular expressions syntax diagramslrk grammars parser <b>construction</b> parsing programming <b>languages</b> language generation formal definition <b>compilers</b> translators scanners 4.2 5.21 5.23 ca771005 jb december 27 1977 1101
cacm-2579.html: cacm november 1974 freiburghouse r a optimization redundant computations common subexpressions register allocation <b>compilers</b> programming <b>languages</b> virtual memory demand paging 4.12 4.2 4.39 ca741105 jb january 16 1978 1024
cacm-2666.html: lions counter gotliebs method <b>construction</b> school timetables timetable problem essentially discrete problem
cacm-0252.html: programming duplex computer system paper describes method duplex-computer programming computers military defense system.
cacm-0265.html: low level language subroutines fortran paper describes subroutines coded symbolic <b>languages</b> fortran coded programs deal special arithmetic eg
cacm-2886.html: semantic evaluation left paper describes attribute grammars definition programming <b>languages</b> <b>compilers</b> formal definition attribute grammars discussion important aspects included
cacm-3102.html: incorporation units programming <b>languages</b> issues programming language aid keeping track physical units feet sec etc
cacm-1723.html: computer <b>construction</b> project networks project networks pert cpm
cacm-3115.html: orderly enumeration nonsingular binary matrices applied text encryption nonsingular binary matrices order n, i.e., nonsingular field {0, 1}, initial segment natural numbers one-to-one correspondence.
cacm-0637.html: experience shown inherent difficulty building <b>compilers</b> <b>compilers</b> indeed pointed advantages pol constructing programming systems
cacm-2411.html: tree-structured programs cacm november 1973 wegner e control structures flowcharts goto statements inductive assertion fix points optimization <b>compilers</b> program documentation program flow graphs programming language design proof programs semantics programming <b>languages</b> structured programming
cacm-1350.html: augmented predictive analyzer context-free languages-its relative efficiency proven greibach context-free grammar g standard-form grammar gs constructed generates <b>languages</b> generated rules form cy1 ym m o yi <b>intermediate</b> symbols terminal symbol
cacm-3099.html: sufficient conditions <b>construction</b> difficult integer programming problems known optimal solutions
cacm-2939.html: means programming examples utility kinds abstractions program <b>construction</b> illustrated shown clu programs written implement abstractions
cacm-1533.html: marovian model university michigan executive system mathematical model computer's executive system postulated parameters estimated aid extensive data system's operation.
cacm-1135.html: philosophy potential overcome well-known deficiencies business-oriented <b>languages</b> fully meets requirements set codasyl <b>languages</b> including machine-independence
cacm-1976.html: multi-attribute retrieval combined indexes paper organization scheme designed replace popular secondary index filing scheme (or inverted secondary key fields) described.
cacm-1029.html: simple automatic derivative evaluation program procedure automatic evaluation total/partial derivatives arbitrary algebraic functions presented.
cacm-1387.html: solution systems polynomial equations elimination elimination procedure williams coded lisp formac solving systems polynomial equations.
cacm-3130.html: curriculum '78 - recommendations undergraduate program computer science contained report recommendations undergraduate degree program computer science curriculum committee computer science (c3s) association computing machinery (acm).
cacm-2542.html: cacm february 1973 graham r m clancy g j jr devaney d b operating system development language processing software evaluation <b>compilers</b> system programming supervisory systems debugging program maintenance modeling system integration simulation 4.0 4.12 4.22 4.30 4.42 4.43 8.1 ca730206 jb january 24 1978 207 pm
cacm-1386.html: symbolic factoring polynomials variables algorithm finding symbolic factors multi-variate polynomial integer coefficients presented.
cacm-1457.html: advantages programming <b>languages</b> retrieval application examined suggestions made design programming facilities aid information retrieval
cacm-1835.html: cacm october 1969 dewar r b k hochsprung r r <b>languages</b> programming <b>languages</b> student programming systems language design high school programs college courses 1.51 1.52 4.12 4.22 ca691011 jb february 15 1978 154 pm
cacm-2873.html: cacm april 1976 raymond j interactive programming problem oriented <b>languages</b> computer graphics interpreters analytic geometry 3.20 4.13 4.22 4.9 ca760403 jb january 4 1978 426 pm
cacm-1304.html: rapid turnaround multi-programming system paper, basic features, system characteristics control algorithm multi-programming system rapid turnaround time described.
cacm-1852.html: experience programming <b>languages</b> implementation based algorithm language transferred machine man-week machine
cacm-2254.html: dynamic partitioning array <b>languages</b> classical process partitioning array subarrays extended array language operation
cacm-1807.html: development fortran <b>compilers</b> proved produce excellent object code significantly reducing compilation speed
cacm-3171.html: line numbers made cheap technique run-time line number administration implementations high level languages.
cacm-1671.html: phonological rule tester design implementation system alleviate problem rule evaluation linguist area phonology presented.
cacm-2990.html: effective information retrieval term accuracy performance information retrieval systems evaluated number ways.
cacm-3124.html: recursive data structures apl mathematical study approaches defining nested arrays apl presented.
cacm-0062.html: multi-dimensional least-squares polynomial curve fitting cacm september, 1959 lesh, f. h. ca590907 jb march 22, 1978 4:44 pm
cacm-2684.html: cacm february 1974 ledgard h f syntax translation context-sensitive grammars <b>compilers</b> formal definition pl/i standards 4.2 5.21 5.23 ca740205 jb january 18 1978 107 pm
cacm-2138.html: cacm december 1971 wulf w a russell d b programming <b>languages</b> implementation language systems programming data structures 4.12 4.21 4.22 ca711205 jb february 2 1978 1009
cacm-2929.html: cacm september 1977 scheifler r w inline substitution open coding open compilation program optimization <b>compilers</b> structured programming <b>languages</b> run-time statistics 4.12 ca770905 jb december 27 1977 123 pm
cacm-3030.html: hierarchical design proof hierarchical programming increasingly recognized helpful <b>construction</b> large programs.
cacm-3093.html: cacm june 1978 mickunas m modry j programming <b>languages</b> error correction automatic correction parsing lr syntax errors <b>compilers</b> 4.12 4.42 5.23 ca780604 dh february 26 1979 1222 pm
cacm-1003.html: <b>construction</b> computer programs based direct statement physical laws principle general applicability applied physical phenomena
cacm-1572.html: simulation time sharing systems development large scale time-sharing systems raised number problems computation center management.
cacm-2424.html: technique dynamic verification <b>construction</b> operating system make decisions improperly presence single hardware software fault
cacm-1402.html: method obtaining functional values points <b>intermediate</b> integration points yields accuracy comparable integration require storing additional information interpolation methods
cacm-0303.html: basic terminology connected mechanical <b>languages</b> processors suggestions paper part terminology work university pennsylvanias office computer research education
cacm-1162.html: assembly <b>languages</b> generally provide one-for-one translation symbolic numeric version program is assembly language machine language
cacm-1456.html: important conclusion that lisp list processing <b>languages</b> ideally suited producing complex associative structures inadequate vehicles language processing large scale-at east auxiliary memory continuous extension core memory
cacm-2372.html: implementation security measures information systems security information system represented model matrix elements decision rules row column indices users data items respectively.
cacm-1788.html: general processor programming <b>languages</b> efforts made develop implementing higher level programming language <b>construction</b> compiler proved generally satisfactory
cacm-2534.html: cacm march 1973 conway r w wilcox t r <b>compilers</b> debugging pl/i programming <b>languages</b> 1.5 4.12 4.42 ca730305 jb january 24 1978 1045
cacm-3105.html: programming <b>languages</b> access control data types abstract data types type checking capabilities 4.20 4.35 ca780502 dh february 26 1979 319 pm
cacm-2470.html: cacm august 1973 maclennan b j semantics formal systems lambda-calculus extensible <b>languages</b> data types modes axioms correctness formal language definition formal description data structures description <b>languages</b> models computation 4.22 5.21 5.24 5.26 ca730804 jb january 23 1978 1101
cacm-2316.html: cacm july 1972 sammet j e programming <b>languages</b> higher level <b>languages</b> <b>languages</b> history future directions language interrelationships programming language tree programming language history programming language future 1.2 4.2 ca720712 jb january 30 1978 138 pm
cacm-1194.html: establishment acm repository principles ir system applied operation history establishment acm repository moore school, university pennsylvania, reviewed briefly.
cacm-1947.html: cacm january 1969 lowry e s medlock c w <b>compilers</b> data flow analysis dominance efficiency fortran graph theory loop structure machine instructions object code optimization redundancy elimination register assignment system/360 4.12 5.24 5.32 ca690102 jb february 20 1978 1215 pm
cacm-2210.html: method illustrated automatic <b>construction</b> recursive iterative programs operating natural numberslists trees order construct program satisfying specifications theorem induced specifications proved desired program extracted proof
cacm-2746.html: <b>construction</b> pattern matching machine takes time proportional sum lengths keywords
cacm-2820.html: cacm november 1976 wilcox t r davis a m tindall m h interactive programming table driven <b>compilers</b> error correction interpreters debugging computer assisted instruction computer science education 1.5 4.12 4.13 4.42 8.2 ca761103 jb january 3 1978 337 pm
cacm-2867.html: modularization hierarchy family operating systems paper describes design philosophy <b>construction</b> family operating systems.
cacm-0205.html: macro instruction extensions compiler <b>languages</b> macroinstruction <b>compilers</b> constructed small set functions made extremely powerful
cacm-2732.html: cacm august 1975 dijkstra e w programming <b>languages</b> sequencing primitives program semantics programming language semantics nondeterminacy case-construction repetition termination correctness proof derivation programs programming methodology 4.20 4.22 ca750803 jb january 6 1978 446 pm
cacm-1223.html: high speed compilation efficient object code three-pass compiler properties briefly described passes scan <b>intermediate</b> language produced preceding pass essentially reverse order generated pass hasto read bulky problem-oriented input
cacm-0661.html: indexing lambda-notation methods indexing sequentially stored elements sparse multi-dimensional arrays scheme notation.
cacm-2136.html: note "a modification nordsieck's method 'off-step' point" cacm december, 1971 blumberg, j. w. foulk, c. r. ordinary differential equations, multi-step methods, predictor, corrector, round-off error, nordsieck's method, gragg-stetter modification 5.11 5.16 5.17 ca711207 jb february 2, 1978 9:52
cacm-3077.html: cacm august 1978 backus j functional programming algebra programs combining forms functional forms programming <b>languages</b> von neumann computers von neumann <b>languages</b> models computing systems applicative computing systems applicative state transition systems program transformation program correctness program termination metacomposition 4.20 4.29 5.20 5.24 5.26 ca780801 dh february 7 1979 313 pm
cacm-1309.html: special <b>languages</b> extract matran permits selective extraction data subset efficient processing computational sequence flexible presentation results tabular graphical form
cacm-1348.html: flowtrace, computer program flowcharting programs flowtrace system produces flowcharts programs written "almost any" programming language.
cacm-2739.html: cacm july 1975 sager n grishman r natural language parsing grammar programming <b>languages</b> 3.42 3.79 4.22 ca750703 jb january 9 1978 1017
cacm-2652.html: reduction compilation costs language contraction programming <b>languages</b> tailored groups users constructed removing unwanted features general purpose language
cacm-2233.html: signature simulation cryptographic codes cyphers allegedly authored thomas jefferson beale 1822 subject intensive study 100 years.
cacm-0799.html: design separable transition-diagram compiler* cobol compiler design presented compact permit rapid, one-pass compilation large subset cobol moderately large computer.
cacm-1484.html: inadequacies standard programming <b>languages</b> description systems discussed dialect algol suitable describing synchronous systems introduced
cacm-2718.html: cacm october 1975 gerritsen r network model databases data base task group database design data structure automatic programming translation nonprocedural <b>languages</b> 3.5 3.64 3.7 4.2 5.23 ca751001 jb january 6 1978 202 pm
cacm-1565.html: language-independent macro processor macro processor source language.
cacm-1521.html: multi-dimensional partition generator (algorithm 313 [a1]) cacm october, 1967 bratley, p. mckay, j. k. s. ca671012b jb march 23, 1978 2:26 pm
cacm-1611.html: scheduling project networks basic concepts terminology project networking developed.
cacm-3189.html: algebraic compiler fortran assembly program algebraic compiler written added fortran assembly program.
cacm-1658.html: analysis algorithms zero-one programming problem paper concerned review examination existing algorithms zero-one programming problem.
cacm-1783.html: combinations rounding truncation conversions question considered significant digits needed <b>intermediate</b> base allow in-and-out conversions original number when possible significant digit
cacm-1496.html: formal semantics computer <b>languages</b> application compiler-compiler semantic meta-language developed representing meanings statements large class computer <b>languages</b>
cacm-1134.html: effects 6600 computer language structures problem compiling efficient 6600 codes prompted development <b>intermediate</b> language reflecting structure machine easily manipulated improving object program efficiency
cacm-2341.html: blocks-a data type snobol4 data type, called block, implemented snobol4.
cacm-1869.html: block structures indirect addressing garbage collection programming <b>languages</b> included explicit implicit block structures provide naming convenience programmer
cacm-2320.html: cacm july 1972 hansen p b structured multiprogramming programming <b>languages</b> operating systems concurrent processes shared data mutual exclusion critical regions process communication synchronizing events
cacm-2558.html: protection programming <b>languages</b> linguistic mechanisms protect subprogram anothers malfunctioning described
cacm-2767.html: comparison simulation event list algorithms algorithms considered schedule events general purpose discrete simulation system.
cacm-3101.html: cacm may 1978 hanson d griswold r procedures coroutines programming <b>languages</b> interpreters snobol 4 backtracking 4.2 4.20 4.22 4.13 ca780506 dh february 26 1979 136 pm
cacm-1238.html: technique integrated reports multi-run system requirements requisition accounting system san francisco overseas supply agency (osa) included exception reporting osa itself.
cacm-2062.html: application sequential sampling simulation: inventory model sequential sampling procedures applied analysis data generated computer simulation experiment multi-item inventory model.
cacm-2609.html: interpolation rounded ramp functions interpolation function introduced.
cacm-0051.html: <b>construction</b> micro-flowcharts cacm october 1959 gorn s ingerman p z crozier j b ca591008 jb march 22 1978 410 pm
cacm-0070.html: <b>construction</b> set test matrices paper develops equations properties set test matrices determination accuracy routines finding inverse determinant and/or eigenvalues matrix
cacm-0929.html: glossary <b>construction</b> cacm february 1963 grems m ca630204 jb march 14 1978 221 pm
cacm-1313.html: <b>construction</b> nonlinear programming test problems cacm february 1965 rosen j b suzuki s ca650211 jb march 7 1978 1058 pm
cacm-2066.html: algol <b>construction</b> procedures parameters procedures cacm april 1970 knight k r algol procedures parameters side effects 4.22 ca700418 jb february 13 1978 230 pm
cacm-2495.html: adapting optimal code generation arithmetic expressions instruction sets present-day computers cacm june 1973 stockhausen p f arithmetic expressions code generation <b>compilers</b> object-code optimization register assignment trees 4.12 5.24 5.32 ca730605 jb january 23 1978 224 pm
cacm-2551.html: mutual recursion algol 60 restricted <b>compilers</b> cacm january, 1973 atkins,m.
