subexpression ordering in the execution of arithmetic expressions an arithmetic expression can often be broken down into its component subexpressions depending on the hardware environment in which the expression is to be executed these subexpressions can be evaluated in serials in parallel or in a combination of these modes this paper shows that expression execution time can be minimized only if consideration is given to the ordering of the subexpressions in particular subexpressions should be executed in order of decreasing memory and processor time requirements this observation is valid for configurations ranging from a uniprocessor with an unbuffered main memory to multiprocessor with a cache buffer memory if the number of subexpressions which can be executed in parallel exceeds the number of available processors then execution of some of these subexpressions must be postponed a procedure is given which combines this requirement with the earlier ordering considerations to provide an optimal execution sequence cacm july 1971 ramamoorthy c v gonzalez m j parallel processing cache arithmetic expressions subexpression ordering computational trees compilers 4.12 4.32 ca710707 jb february 2 1978 4:49 pm