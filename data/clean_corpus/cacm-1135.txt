a general business-oriented language based on decision expressions the structure of a digital compute programming language which covers a wide class of business and file processing applications is presented such a structure based on identifying and incorporating into a compiler the aspects common to all processes of such class permits writing extremely compact programs even for comparatively complex applications in terms of tables of control expressions which express only information characteristic of the particular application furthermorelocal changes of a process eg changes affecting only one of the output files involved can be effected by local modifications in the program eg modification of only one entry of the tables this structure also allows for inexpensive preparation of loading-speed compilers which translate the source programs into efficient machine codes the approach adopted here departs from conventional mechanical language design philosophies it stresses the structural analysis of the class of processes to be represented in the languages as opposed to emphasizing formal ie contents-independent syntactical definitions it relies exclusively on nonprocedural representation of process as sets tables of relations between data and results there are no control statements such as go to etc instead of using procedure descriptions which are one-to-one translations of flowcharts here an invariant pattern of procedure is identified as characteristic of the class of all batch file processes this new philosophy has the potential to overcome well-known deficiencies of other business-oriented languages and fully meets the requirements set by codasyl for such languages including machine-independence cacm february 1964 lombardi l a ca640208 jb march 10 1978 4:08 am